# Создание списков.
# Первый способ.
# В цикле из диапазона от 1 до 15 выбираем числа и с помощью спискового метода append
# добавляем их к списку a.
<<<<<<< HEAD
#
=======
##################################
>>>>>>> master
a = []
for i in range(1,15+1):
    a.append(i)
print(a)
<<<<<<< HEAD
#
# Второй способ.                  
# С созданием списка из диапазона.
#
b = list(range(1,15+1))
print(b)
#
# Можно также использовать «списковое включение» (иногда его называют «генератором
# списка»).
#
c = [L for L in range(1,15+1)]
print(c)
#
# В следующем примере выбираем из диапазона все числа от 1 до 14, возводим их в квадрат
# и сразу формируем из них новый список.
#
d = [i ** 2 for i in range(1,15+1)]
print(d)
#
# Списковое включение позволяет задавать условие для выбора значения из диапазона (в
# примере исключили значение 4)
#
a = [i ** 2 for i in range(1,16) if i != 4]
print(a)
#
# Вместо диапазонов списковое включение позволяет указывать существующий список.
# В примере мы выбираем последовательно значения из списка a, возводим в квадрат каждый
# из его элементов и сразу добавляем полученные значения в новый список.
#
a = [2, -2, 4, -4, 5, 7]
b = [i ** 2 for i in a]
print(b)
#
# По аналогии можно перебирать символы из строки и формировать из них список.
#
c = [c * 3 for c in 'list' if c != 'i']
print(c)
#
# В Python есть интересная функция 'map', которая позволяет создавать новый список на
# основе существующего списка.
# Функция 'map' принимает в качестве аргументов имя функции и список (или строку).
# Каждый элемент списка (или строки) подается на вход функции, и результат работы
# функции добавляется как элемент нового списка. Получить результат вызова функции 'map'
# можно через цикл 'for' или функцию 'list'. Функции, которые принимают на вход другие
# функции, называются функциями высшего порядка.
#
def f(x):
    return x + 5
print(list(map(f, [1, 3, 4])))
#
# Пример вызова map для строки.
# 
def fs(s):
    return s * 2
print(list(map(fs, 'hello')))
#
# Рассмотрим, как получить список, состоящий из случайных целых чисел.
# В данном примере функция range выступает как счетчик числа повторений (цикл for
# сработает ровно 5 раз). Обратите внимание, что при формировании нового списка
# переменная i не используется. В результате пять раз будет произведен вызов функции
# randint, которая сгенерирует целое случайное число из интервала, и уже это число
# добавится в новый список.
#
from random import randint
A = [randint(1,9) for i in range(5)]
print(A)
#
# Перейдем к ручному вводу значений для списка. Зададим длину списка и введем с
# клавиатуры все его значения.
#
a = [] # объявляем пустой список
n = int(input()) # считываем кол-во элементов в списке
for i in range(n):
    # new_element =  int(input()) # считываем новый элемент
    # a.append(new_element) # добавляем элемент в список
    # последние два элемента из цикла, можно заменить одной строкой
    a.append(int(input()))
print(a)
#
# Решение одной строкой
#
A = [int(input()) for i in range(int(input()))]
print(A)
=======
####################################
# Второй способ.                  ##
# С созданием списка из диапазона.##
####################################
b = list(range(1,15+1))
print(b)
##################################################################################
# Можно также использовать «списковое включение» (иногда его называют «генератором
# списка»).
##################################################################################
c = [L for L in range(1,15+1)]
print(c)
##################################################################################
# В следующем примере выбираем из диапазона все числа от 1 до 14, возводим их в квадрат
# и сразу формируем из них новый список.
##################################################################################
d = [i ** 2 for i in range(1,15+1)]
print(d)
>>>>>>> master
